<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        TkSuQmCC
</value>
  </data>
</root>